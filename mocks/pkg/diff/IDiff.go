// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IDiff is an autogenerated mock type for the IDiff type
type IDiff struct {
	mock.Mock
}

// Format provides a mock function with given fields: _a0, changedFiles
func (_m *IDiff) Format(_a0 string, changedFiles []string) (string, []error) {
	ret := _m.Called(_a0, changedFiles)

	if len(ret) == 0 {
		panic("no return value specified for Format")
	}

	var r0 string
	var r1 []error
	if rf, ok := ret.Get(0).(func(string, []string) (string, []error)); ok {
		return rf(_a0, changedFiles)
	}
	if rf, ok := ret.Get(0).(func(string, []string) string); ok {
		r0 = rf(_a0, changedFiles)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []string) []error); ok {
		r1 = rf(_a0, changedFiles)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

// NewIDiff creates a new instance of IDiff. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDiff(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDiff {
	mock := &IDiff{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
