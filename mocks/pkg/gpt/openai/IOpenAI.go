// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	openai "github.com/sashabaranov/go-openai"
)

// IOpenAI is an autogenerated mock type for the IOpenAI type
type IOpenAI struct {
	mock.Mock
}

// CreateChatCompletion provides a mock function with given fields: ctx, request
func (_m *IOpenAI) CreateChatCompletion(ctx context.Context, request openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateChatCompletion")
	}

	var r0 openai.ChatCompletionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionRequest) openai.ChatCompletionResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(openai.ChatCompletionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, openai.ChatCompletionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModel provides a mock function with given fields:
func (_m *IOpenAI) GetModel() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModel")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetModel provides a mock function with given fields: model
func (_m *IOpenAI) SetModel(model string) {
	_m.Called(model)
}

// NewIOpenAI creates a new instance of IOpenAI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOpenAI(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOpenAI {
	mock := &IOpenAI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
