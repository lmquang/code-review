// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IGit is an autogenerated mock type for the IGit type
type IGit struct {
	mock.Mock
}

// ExecCommand provides a mock function with given fields: name, args
func (_m *IGit) ExecCommand(name string, args ...string) (string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecCommand")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (string, error)); ok {
		return rf(name, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(name, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(name, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiff provides a mock function with given fields:
func (_m *IGit) GetDiff() (string, []string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDiff")
	}

	var r0 string
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, []string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() []string); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetFileContentAtBranchPoint provides a mock function with given fields: file, branchPoint
func (_m *IGit) GetFileContentAtBranchPoint(file string, branchPoint string) (string, error) {
	ret := _m.Called(file, branchPoint)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContentAtBranchPoint")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(file, branchPoint)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(file, branchPoint)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(file, branchPoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIGit creates a new instance of IGit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGit(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGit {
	mock := &IGit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
